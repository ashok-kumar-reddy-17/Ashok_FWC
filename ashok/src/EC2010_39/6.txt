\documentclass[twocolumn]{article}

\usepackage[utf8]{inputenc}
\usepackage{amsmath, amssymb}
\usepackage{xcolor, graphicx}
\usepackage{float, caption}
\usepackage{geometry}
\usepackage{array, enumitem}
\usepackage{cuted, fancyhdr, lmodern, microtype, hyperref, dblfloatfix}
\geometry{margin=1in}

\pagestyle{empty}

% Apply color to section titles throughout
\usepackage{sectsty}
\sectionfont{\color{blue}}


\begin{document}

\begin{strip}
\vspace*{1em}  
\begin{minipage}{0.45\textwidth}
    \includegraphics[width=\textwidth]{/storage/emulated/0/pdf/IMG-20250514-WA0013.png}
\end{minipage}\hfill
\begin{minipage}{0.45\textwidth}
    \raggedright
    \textbf{Name:} Ashok Kumar Reddy K \\
    \textbf{Batch:} 2 \\
    \textbf{ID:} cometfwc016 \\
    \textbf{Date:} 9\textsuperscript{th} July 2025 \\
    \textbf{Email:} \texttt{kothapalli.fwc1@iiitb.ac.in} \\
    \textbf{Institute:} IIITB \textendash{} COMET Foundation
\end{minipage}

\begin{center}
    {\LARGE \textbf{\textcolor{blue}{GATE Question Paper 2010, EC Question Number 39}}}
\end{center}

\vspace{1em}

\end{strip}

\vspace{1em}

\section*{\textcolor{blue}{Question 39 Analysis}}

\textcolor{blue}{\textbf{Question:}}
\begin{quote}
 the Boolean function realized by the logic circuit shown is   
\end{quote}


\begin{figure}[H]
    \centering
    \includegraphics[width=0.45\textwidth]{/storage/emulated/0/latex/IMG-20250609-WA0024.jpg} % <-- Use valid image path
\end{figure}
\begin{enumerate}[label=\Alph*)]
    \item $\sum m(0,1,3,5,9,10,14)$
    \item $\sum m(2,3,5,7,8,12,13)$
    \item $\sum m(1,2,4,5,11,14,15)$
    \item $\sum m(2,3,4,5,8,9,12)$
\end{enumerate}


\section*{\textcolor{blue}{Solution: Logic Circuit using 4x1 Multiplexer}}

\textbf{Given:} A 4x1 MUX has:
\begin{itemize}
  \item Select lines: $A$ and $B$ (Y = Output)
  \item Inputs: 
    \begin{align*}
      I_0 &= C \\
      I_1 &= D \\
      I_2 &= \overline{C} \\
      I_3 &= C \cdot D
    \end{align*}
\end{itemize}

\textbf{Recall:} A 4x1 MUX selects one of the four inputs $I_0, I_1, I_2, I_3$ based on select inputs $A$ and $B$ as follows:

\begin{center}
\begin{tabular}{|c|c|c|}
\hline
A & B & Selected Input \\
\hline
0 & 0 & $I_0$ \\
0 & 1 & $I_1$ \\
1 & 0 & $I_2$ \\
1 & 1 & $I_3$ \\
\hline
\end{tabular}
\end{center}

\section*{\textcolor{blue}{Substitute the Inputs}}

\[
Y = F(A,B,C,D) =
\begin{cases}
C & \text{if } AB = 00 \\
D & \text{if } AB = 01 \\
\overline{C} & \text{if } AB = 10 \\
C \cdot D & \text{if } AB = 11 \\
\end{cases}
\]

\section*{\textcolor{blue}{Final Expression}}

\[
F(A,B,C,D) = A'B'C + A'BD + AB'\overline{C} + ABDC
\]

\section*{\textcolor{blue}{Minimized SOP (Optional)}}

No further simplification unless Karnaugh map is used — expression already in SOP form.

\textbf{Complete Truth Table:}

\begin{center}
\begin{tabular}{|c|c|c|c||c|}
\hline
A & B & C & D & F(A,B,C,D) \\
\hline
0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 1 & 0 \\
0 & 0 & 1 & 0 & 1 \\
0 & 0 & 1 & 1 & 1 \\
\hline
0 & 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 1 & 1 \\
0 & 1 & 1 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 \\
\hline
1 & 0 & 0 & 0 & 1 \\
1 & 0 & 0 & 1 & 1 \\
1 & 0 & 1 & 0 & 0 \\
1 & 0 & 1 & 1 & 0 \\
\hline
1 & 1 & 0 & 0 & 1 \\
1 & 1 & 0 & 1 & 0 \\
1 & 1 & 1 & 0 & 0 \\
1 & 1 & 1 & 1 & 0 \\
\hline
\end{tabular}
\end{center}

\begin{enumerate}[label=\Alph*)]
    \item $\sum m(0,1,3,5,9,10,14)$
    \item $\sum m(2,3,5,7,8,12,13)$
    \item $\sum m(1,2,4,5,11,14,15)$
    \item \textcolor{blue}{$\sum m(2,3,4,5,8,9,12)$ \quad (Correct Answer)}
\end{enumerate}


\section*{\textcolor{blue}{Brief Discussion}}

The uploaded circuit implements a 4×1 multiplexer using logic gates on the input lines. It uses inputs \( C \) and \( D \), while select lines \( A \) and \( B \) determine which input is routed to the output \( F \). This configuration is realized on an Arduino Uno with push buttons acting as binary inputs and an LED showing the output state.

\section*{\textcolor{blue}{Abstract}}

This experiment demonstrates the practical implementation of a 4x1 multiplexer with logic-driven inputs using an Arduino Uno. The MUX selects one of four logic expressions (\(C\), \(D\), \(\overline{C}\), \(C \cdot D\)) based on the select lines \( A \) and \( B \). The final output is observed on an LED, helping validate the circuit's theoretical truth table.

\section*{\textcolor{blue}{Hardware Requirements}}

\begin{table}[H]
\centering
\begin{tabular}{|c|l|}
\hline
\textbf{S.No} & \textbf{Component} \\ \hline
1 & Arduino Uno Board \\
2 & Breadboard \\
3 & Push Buttons (4) \\
4 & LED (1) \\
5 & Resistors: 220$\Omega$, 10k$\Omega$ \\
6 & Jumper Wires \\
7 & USB Cable \\
\hline
\end{tabular}
\caption*{\textbf{Table 1: Required Components for Arduino Setup}}
\end{table}

\section*{\textcolor{blue}{Pin Connections}}

\begin{table}[H]
\centering
\begin{tabular}{|c|c|}
\hline
\textbf{Component} & \textbf{Arduino Pin} \\ \hline
Input A (Select 1) & Digital 2 \\
Input B (Select 2) & Digital 3 \\
Input C & Digital 4 \\
Input D & Digital 5 \\
Output F (LED) & Digital 8 \\
GND & GND \\
VCC & 5V \\
\hline
\end{tabular}
\caption*{\textbf{Table 2: Pin Mapping for Arduino Uno}}
\end{table}

\section*{\textcolor{blue}{Logic Description}}

\begin{itemize}
    \item Select Lines: \( A, B \)
    \item Data Inputs:
    \[
    \begin{aligned}
        I_0 &= C \\
        I_1 &= D \\
        I_2 &= \overline{C} \\
        I_3 &= C \cdot D
    \end{aligned}
    \]
    \item Output Logic:
    \[
    F(A,B,C,D) =
    \begin{cases}
        C & \text{if } AB = 00 \\
        D & \text{if } AB = 01 \\
        \overline{C} & \text{if } AB = 10 \\
        C \cdot D & \text{if } AB = 11 \\
    \end{cases}
    \]
\end{itemize}

\section*{\textcolor{blue}{Upload Steps}}

\begin{enumerate}[label=\arabic*.]
    \item Connect Arduino Uno to a computer via USB.
    \item Open Arduino IDE or ArduinoDroid mobile app.
    \item Paste the sketch implementing the above MUX logic (code not shown here).
    \item Select the correct COM port and board (Arduino Uno).
    \item Upload the code to Arduino.
    \item Press different combinations on the buttons to represent inputs \( A, B, C, D \).
    \item Observe the LED status to validate the logic.
\end{enumerate}

\section*{\textcolor{blue}{Truth Table Observation}}

\begin{table}[H]
\centering
\begin{tabular}{|c|c|c|c|c|}
\hline
A & B & C & D & F (LED Output) \\ \hline
0 & 0 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 & 1 \\
0 & 1 & 0 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 \\
1 & 0 & 0 & 0 & 1 \\
1 & 0 & 1 & 0 & 0 \\
1 & 1 & 0 & 1 & 0 \\
1 & 1 & 1 & 1 & 1 \\
\hline
\end{tabular}
\caption*{\textbf{Table 3: Output Truth Table of MUX on Arduino}}
\end{table}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.45\textwidth]{/storage/emulated/0/latex/6_1.png}
    \caption*{Figure: 4x1 MUX with logic inputs implemented using Arduino Uno}
\end{figure}
\section*{\textcolor{blue}{Conclusion}}

\begin{itemize}
    \item The 4x1 MUX was implemented and tested successfully on Arduino Uno.
    \item Logic gates were recreated using Microcontroller code to simulate each MUX input.
    \item The output matches theoretical expectations for all input combinations.
    \item Final simplified expression:
    \[
    F = A'B'C + A'BD + AB'\overline{C} + ABCD
    \]
    \item This corresponds to minterms \( \sum m(2,3,4,5,8,9,12) \) — matching \textbf{Option D}.
\end{itemize}

\vspace{1cm}
\section*{\textcolor{blue}{Brief Discussion}}

The uploaded circuit is a 4×1 multiplexer using inputs \( C \) and \( D \), and select lines \( A \) and \( B \). The logic of the inputs to the MUX involves combinations of basic gates like NOT and AND. We implement the circuit practically using Raspberry Pi Pico 2 W and test the output for all input combinations.


\section*{\textcolor{blue}{Abstract}}

This project demonstrates how to implement a 4×1 multiplexer with specific logic functions on each data input line using Raspberry Pi Pico 2 W. Inputs \( A \) and \( B \) act as select lines, while the data lines are driven by signals \( C \), \( D \), \( \overline{C} \), and \( C \cdot D \). The output logic is tested using an LED for each combination.

\section*{Implementation using Raspberry Pi Pico 2 W}

\textbf{Hardware Requirements:}
\begin{table}[H]
\centering
\begin{tabular}{|c|l|}
\hline
\textbf{S.No} & \textbf{Component} \\ \hline
1 & Raspberry Pi Pico 2 W \\
2 & Breadboard \\
3 & Push Buttons (4) \\
4 & LED (1) \\
5 & Resistors: 220$\Omega$, 10k$\Omega$ \\
6 & Jumper Wires \\
7 & Micro USB Cable \\
\hline
\end{tabular}
\caption*{\textbf{Table 1: Pico 2 W Hardware Components}}
\end{table}

\textbf{Pin Connections:}
\begin{table}[H]
\centering
\begin{tabular}{|c|c|}
\hline
\textbf{Component} & \textbf{Pin} \\ \hline
Input A (Select) & GP14 \\
Input B (Select) & GP15 \\
Input C & GP12 \\
Input D & GP13 \\
LED Output & GP10 \\
GND & GND \\
VCC & 3.3V \\
\hline
\end{tabular}
\caption*{\textbf{Table 2: GPIO Mapping for Pico 2 W}}
\end{table}

\section*{\textcolor{blue}{Upload Steps}}

\begin{enumerate}[label=\arabic*.]
    \item Connect Pico 2 W to mobile/PC with USB while pressing BOOTSEL.
    \item Flash MicroPython firmware (.uf2).
    \item Use Thonny/uPyCraft to write and upload MicroPython code.
    \item Implement select logic: Inputs A, B select among 4 inputs \( I_0, I_1, I_2, I_3 \) defined as:
        \begin{itemize}
            \item \( I_0 = C \)
            \item \( I_1 = D \)
            \item \( I_2 = \overline{C} \)
            \item \( I_3 = C \cdot D \)
        \end{itemize}
    \item Press the inputs and observe the LED for output result.
\end{enumerate}

\section*{\textcolor{blue}{Logic Derivation}}

\begin{itemize}
    \item Select Lines: \( A, B \)
    \item Logic:
        \[
        F(A, B, C, D) =
        \begin{cases}
        C & \text{if } AB = 00 \\
        D & \text{if } AB = 01 \\
        \overline{C} & \text{if } AB = 10 \\
        C \cdot D & \text{if } AB = 11 \\
        \end{cases}
        \]
\end{itemize}

\section*{\textcolor{blue}{Truth Table}}

\begin{table}[H]
\centering
\begin{tabular}{|c|c|c|c|c|}
\hline
A & B & C & D & F(A,B,C,D) \\ \hline
0 & 0 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 & 1 \\
0 & 1 & 0 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 \\
1 & 0 & 0 & 0 & 1 \\
1 & 0 & 1 & 0 & 0 \\
1 & 1 & 0 & 1 & 0 \\
1 & 1 & 1 & 1 & 1 \\
\hline
\end{tabular}
\caption*{\textbf{Table 3: Evaluated Truth Table for MUX-Based Function}}
\end{table}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.4\textwidth]{/storage/emulated/0/latex/6.png}
    \caption*{Figure: 4×1 MUX logic implementation with logic gate inputs}
\end{figure}
\section*{\textcolor{blue}{Conclusion}}

\begin{itemize}
    \item The 4×1 MUX was successfully implemented on Raspberry Pi Pico 2 W.
    \item Each input condition verified the correct logic path and output behavior.
    \item Final derived expression (SOP form):\\[0.5em]
    \( F(A,B,C,D) = A'B'C + A'BD + AB'\overline{C} + ABCD \)
    \item This corresponds to the minterms: \( \sum m(2,3,4,5,8,9,12) \) — \textbf{Correct Option: (D)}.
\end{itemize}

\vspace{1cm}
\noindent\textbf{GitHub Repository:} \url{https://github.com/ashok-kumar-reddy-17/Ashok_FWC}

\end{document}
